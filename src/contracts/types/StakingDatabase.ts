/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface StakingDatabaseInterface extends utils.Interface {
  functions: {
    "boostedPool()": FunctionFragment;
    "claimReward(address)": FunctionFragment;
    "getUserDetails(address)": FunctionFragment;
    "getUserDetailsForReward(address)": FunctionFragment;
    "getUserReward(address,uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardBoost(uint256)": FunctionFragment;
    "rewardPool()": FunctionFragment;
    "setReward(address)": FunctionFragment;
    "setStaking(address)": FunctionFragment;
    "stake(uint256,address,uint256)": FunctionFragment;
    "stakingContract()": FunctionFragment;
    "totalShare()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256,address)": FunctionFragment;
    "userDetails(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boostedPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimReward", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getUserDetails",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDetailsForReward",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReward",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardBoost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setReward", values: [string]): string;
  encodeFunctionData(functionFragment: "setStaking", values: [string]): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "userDetails", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "boostedPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDetailsForReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardBoost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalShare", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userDetails",
    data: BytesLike
  ): Result;

  events: {
    "Claim(uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(uint256,uint256,uint256,address)": EventFragment;
    "UnStaked(uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnStaked"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  { reward: BigNumber; shareUS: BigNumber; newShare: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type StakedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  { amount: BigNumber; share: BigNumber; duration: BigNumber; staker: string }
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export type UnStakedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, string],
  {
    amount: BigNumber;
    share: BigNumber;
    boostedReward: BigNumber;
    unstaker: string;
  }
>;

export type UnStakedEventFilter = TypedEventFilter<UnStakedEvent>;

export interface StakingDatabase extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakingDatabaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    boostedPool(overrides?: CallOverrides): Promise<[string]>;

    claimReward(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getUserDetails(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        amounts: BigNumber[];
        timestamps: BigNumber[];
        userShares: BigNumber[];
        totalAmount: BigNumber;
        poolShare: BigNumber;
      }
    >;

    getUserDetailsForReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        poolShare: BigNumber;
        totalReward: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    getUserReward(
      user: string,
      amount: BigNumberish,
      boostedShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        poolShare: BigNumber;
        share2Us: BigNumber;
        boostedReward: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardBoost(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rewardPool(overrides?: CallOverrides): Promise<[string]>;

    setReward(
      _rewardPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      benifector: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<[string]>;

    totalShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      benifector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalAmount: BigNumber; poolShare: BigNumber }
    >;
  };

  boostedPool(overrides?: CallOverrides): Promise<string>;

  claimReward(
    claimer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getUserDetails(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
      amounts: BigNumber[];
      timestamps: BigNumber[];
      userShares: BigNumber[];
      totalAmount: BigNumber;
      poolShare: BigNumber;
    }
  >;

  getUserDetailsForReward(
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalAmount: BigNumber;
      poolShare: BigNumber;
      totalReward: BigNumber;
      totalStaked: BigNumber;
    }
  >;

  getUserReward(
    user: string,
    amount: BigNumberish,
    boostedShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      poolShare: BigNumber;
      share2Us: BigNumber;
      boostedReward: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardBoost(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rewardPool(overrides?: CallOverrides): Promise<string>;

  setReward(
    _rewardPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStaking(
    _staking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    benifector: string,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingContract(overrides?: CallOverrides): Promise<string>;

  totalShare(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    benifector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userDetails(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { totalAmount: BigNumber; poolShare: BigNumber }
  >;

  callStatic: {
    boostedPool(overrides?: CallOverrides): Promise<string>;

    claimReward(
      claimer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reward: BigNumber; boostedReward: BigNumber }
    >;

    getUserDetails(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber[], BigNumber, BigNumber] & {
        amounts: BigNumber[];
        timestamps: BigNumber[];
        userShares: BigNumber[];
        totalAmount: BigNumber;
        poolShare: BigNumber;
      }
    >;

    getUserDetailsForReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalAmount: BigNumber;
        poolShare: BigNumber;
        totalReward: BigNumber;
        totalStaked: BigNumber;
      }
    >;

    getUserReward(
      user: string,
      amount: BigNumberish,
      boostedShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        poolShare: BigNumber;
        share2Us: BigNumber;
        boostedReward: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardBoost(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<string>;

    setReward(_rewardPool: string, overrides?: CallOverrides): Promise<void>;

    setStaking(_staking: string, overrides?: CallOverrides): Promise<void>;

    stake(
      amount: BigNumberish,
      benifector: string,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingContract(overrides?: CallOverrides): Promise<string>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      amount: BigNumberish,
      benifector: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { totalAmount: BigNumber; poolShare: BigNumber }
    >;
  };

  filters: {
    "Claim(uint256,uint256,uint256)"(
      reward?: null,
      shareUS?: null,
      newShare?: null
    ): ClaimEventFilter;
    Claim(reward?: null, shareUS?: null, newShare?: null): ClaimEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(uint256,uint256,uint256,address)"(
      amount?: null,
      share?: null,
      duration?: null,
      staker?: null
    ): StakedEventFilter;
    Staked(
      amount?: null,
      share?: null,
      duration?: null,
      staker?: null
    ): StakedEventFilter;

    "UnStaked(uint256,uint256,uint256,address)"(
      amount?: null,
      share?: null,
      boostedReward?: null,
      unstaker?: null
    ): UnStakedEventFilter;
    UnStaked(
      amount?: null,
      share?: null,
      boostedReward?: null,
      unstaker?: null
    ): UnStakedEventFilter;
  };

  estimateGas: {
    boostedPool(overrides?: CallOverrides): Promise<BigNumber>;

    claimReward(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getUserDetails(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getUserDetailsForReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReward(
      user: string,
      amount: BigNumberish,
      boostedShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardBoost(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardPool(overrides?: CallOverrides): Promise<BigNumber>;

    setReward(
      _rewardPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      benifector: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingContract(overrides?: CallOverrides): Promise<BigNumber>;

    totalShare(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      benifector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userDetails(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    boostedPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimReward(
      claimer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getUserDetails(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDetailsForReward(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReward(
      user: string,
      amount: BigNumberish,
      boostedShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardBoost(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setReward(
      _rewardPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStaking(
      _staking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      benifector: string,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      benifector: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userDetails(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
