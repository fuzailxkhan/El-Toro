/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  StakingManager,
  StakingManagerInterface,
} from "../StakingManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_database",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_rewardPool",
        type: "address",
      },
      {
        internalType: "address payable",
        name: "_boostedPool",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_deductionValue",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "boostedReward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "RewardClaimed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "Staked",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "boostedReward",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "staker",
        type: "address",
      },
    ],
    name: "Unstaked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_beneficiaries",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_amounts",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "_duration",
        type: "uint256[]",
      },
    ],
    name: "batchStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "boostedPool",
    outputs: [
      {
        internalType: "contract BoostedPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "deductionValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rewardPool",
    outputs: [
      {
        internalType: "contract RewardPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_database",
        type: "address",
      },
    ],
    name: "setDatabase",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_rewardPool",
        type: "address",
      },
    ],
    name: "setReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_fees",
        type: "uint256",
      },
    ],
    name: "setWithdrawFees",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_benifactor",
        type: "address",
      },
      {
        internalType: "enum VirtuaStaking.durationTier",
        name: "_duration",
        type: "uint8",
      },
    ],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "stakingDatabase",
    outputs: [
      {
        internalType: "contract StakingDatabase",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalStakedAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawFees",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260146003553480156200001657600080fd5b50604051620014ce380380620014ce833981016040819052620000399162000105565b62000044336200009c565b6000805460ff60a01b1916905560018055600480546001600160a01b03199081166001600160a01b0395861617909155600580548216958516959095179094556006805490941691909216179091556007556200015f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200010257600080fd5b50565b600080600080608085870312156200011c57600080fd5b84516200012981620000ec565b60208601519094506200013c81620000ec565b60408601519093506200014f81620000ec565b6060959095015193969295505050565b61135f806200016f6000396000f3fe6080604052600436106100d25760003560e01c806305d1c371146100de5780632e17de7814610100578063476343ee14610120578063567e98f9146101495780635c975abb1461015f57806366666aa9146101845780636896e51b146101b15780636ab28a9c146101c7578063715018a6146101da57806382a547f8146101ef5780638da5cb5b1461020f578063a3c4bd7914610224578063b88a802f14610237578063bae2f6061461024c578063e5932c401461026c578063f2fde38b1461028c578063f5420374146102ac57600080fd5b366100d957005b600080fd5b3480156100ea57600080fd5b506100fe6100f9366004610f3b565b6102cc565b005b34801561010c57600080fd5b506100fe61011b366004610f3b565b610309565b34801561012c57600080fd5b5061013660035481565b6040519081526020015b60405180910390f35b34801561015557600080fd5b5061013660025481565b34801561016b57600080fd5b5061017461063c565b6040519015158152602001610140565b34801561019057600080fd5b506004546101a4906001600160a01b031681565b6040516101409190610f54565b3480156101bd57600080fd5b5061013660075481565b6100fe6101d5366004610f7d565b61064c565b3480156101e657600080fd5b506100fe610814565b3480156101fb57600080fd5b506005546101a4906001600160a01b031681565b34801561021b57600080fd5b506101a461084f565b6100fe610232366004611005565b61085e565b34801561024357600080fd5b506100fe610ad0565b34801561025857600080fd5b506006546101a4906001600160a01b031681565b34801561027857600080fd5b506100fe61028736600461109e565b610d52565b34801561029857600080fd5b506100fe6102a736600461109e565b610dfa565b3480156102b857600080fd5b506100fe6102c736600461109e565b610e9a565b336102d561084f565b6001600160a01b0316146103045760405162461bcd60e51b81526004016102fb906110c2565b60405180910390fd5b600355565b61031161063c565b1580610335575061032061084f565b6001600160a01b0316336001600160a01b0316145b6103515760405162461bcd60e51b81526004016102fb906110f7565b6002600154036103735760405162461bcd60e51b81526004016102fb90611123565b6002600155806103b45760405162461bcd60e51b815260206004820152600c60248201526b5a65726f20556e7374616b6560a01b60448201526064016102fb565b6005546040516341c0f0c160e11b81526004810183905233602482018190529160009182916001600160a01b031690638381e1829060440160408051808303816000875af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e919061115a565b9092509050600061043f8584611194565b905084600260008282546104539190611194565b909155505060048054604051632e1a7d4d60e01b81529182018390526001600160a01b031690632e1a7d4d90602401600060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b5050600654604051632e1a7d4d60e01b8152600481018690526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b1580156104fa57600080fd5b505af115801561050e573d6000803e3d6000fd5b5050505060006064600754848661052591906111ad565b61052f91906111c0565b61053991906111df565b90506001600160a01b0385168161055085876111ad565b61055a9190611194565b604051600081818185875af1925050503d8060008114610596576040519150601f19603f3d011682016040523d82523d6000602084013e61059b565b606091505b50506004546040516001600160a01b0390911691508290600081818185875af1925050503d80600081146105eb576040519150601f19603f3d011682016040523d82523d6000602084013e6105f0565b606091505b5050507fe58f1bc928f89a539038781e3855b3646edb6dacfabffbc4f320f272e6bb4d6c848442886040516106289493929190611201565b60405180910390a150506001805550505050565b600054600160a01b900460ff1690565b61065461063c565b1580610678575061066361084f565b6001600160a01b0316336001600160a01b0316145b6106945760405162461bcd60e51b81526004016102fb906110f7565b6002600154036106b65760405162461bcd60e51b81526004016102fb90611123565b6002600155346107085760405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742053686f756c642062652067726561746572207468616e20300060448201526064016102fb565b6001600160a01b0382166107535760405162461bcd60e51b815260206004820152601260248201527124b73b30b634b2102132b734b330b1ba37b960711b60448201526064016102fb565b60055434906001600160a01b0316636e9c931c828585600381111561077a5761077a611225565b6040518463ffffffff1660e01b81526004016107989392919061123b565b600060405180830381600087803b1580156107b257600080fd5b505af11580156107c6573d6000803e3d6000fd5b5050505080600260008282546107dc91906111ad565b909155505060405160008051602061130a833981519152906108039083904290339061125a565b60405180910390a150506001805550565b3361081d61084f565b6001600160a01b0316146108435760405162461bcd60e51b81526004016102fb906110c2565b61084d6000610eeb565b565b6000546001600160a01b031690565b61086661063c565b156108835760405162461bcd60e51b81526004016102fb90611279565b848314801561089157508281145b6108d85760405162461bcd60e51b81526020600482015260186024820152774d69736d617463686564206172726179206c656e6774687360401b60448201526064016102fb565b600034116108f85760405162461bcd60e51b81526004016102fb906112a3565b60005b85811015610ac7576000878783818110610917576109176112da565b905060200201602081019061092c919061109e565b6001600160a01b0316036109785760405162461bcd60e51b8152602060048201526013602482015272496e76616c69642042656e656669636961727960681b60448201526064016102fb565b600085858381811061098c5761098c6112da565b90506020020135116109b05760405162461bcd60e51b81526004016102fb906112a3565b60008585838181106109c4576109c46112da565b600554602090910292909201359250506001600160a01b0316636e9c931c828a8a868181106109f5576109f56112da565b9050602002016020810190610a0a919061109e565b878787818110610a1c57610a1c6112da565b905060200201356040518463ffffffff1660e01b8152600401610a419392919061123b565b600060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050508060026000828254610a8591906111ad565b909155505060405160008051602061130a83398151915290610aac9083904290339061125a565b60405180910390a15080610abf816112f0565b9150506108fb565b50505050505050565b610ad861063c565b15610af55760405162461bcd60e51b81526004016102fb90611279565b60055460405163d279c19160e01b8152339160009182916001600160a01b03169063d279c19190610b2a908690600401610f54565b60408051808303816000875af1158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c919061115a565b60048054604051632e1a7d4d60e01b81529182018490529294509092506001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b158015610bb857600080fd5b505af1158015610bcc573d6000803e3d6000fd5b5050600654604051632e1a7d4d60e01b8152600481018590526001600160a01b039091169250632e1a7d4d9150602401600060405180830381600087803b158015610c1657600080fd5b505af1158015610c2a573d6000803e3d6000fd5b50505050600060646007548385610c4191906111ad565b610c4b91906111c0565b610c5591906111df565b90506001600160a01b03841681610c6c84866111ad565b610c769190611194565b604051600081818185875af1925050503d8060008114610cb2576040519150601f19603f3d011682016040523d82523d6000602084013e610cb7565b606091505b50506004546040516001600160a01b0390911691508290600081818185875af1925050503d8060008114610d07576040519150601f19603f3d011682016040523d82523d6000602084013e610d0c565b606091505b5050507fee3a40aa442ea522b4c220888999101afd18073b0a2b0cf43096d3c96844e22383834287604051610d449493929190611201565b60405180910390a150505050565b33610d5b61084f565b6001600160a01b031614610d815760405162461bcd60e51b81526004016102fb906110c2565b600480546001600160a01b0319166001600160a01b038381169190911782556005546040516303964cb160e61b815291169163e5932c4091610dc591859101610f54565b600060405180830381600087803b158015610ddf57600080fd5b505af1158015610df3573d6000803e3d6000fd5b5050505050565b33610e0361084f565b6001600160a01b031614610e295760405162461bcd60e51b81526004016102fb906110c2565b6001600160a01b038116610e8e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102fb565b610e9781610eeb565b50565b33610ea361084f565b6001600160a01b031614610ec95760405162461bcd60e51b81526004016102fb906110c2565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610f4d57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114610e9757600080fd5b60008060408385031215610f9057600080fd5b8235610f9b81610f68565b9150602083013560048110610faf57600080fd5b809150509250929050565b60008083601f840112610fcc57600080fd5b5081356001600160401b03811115610fe357600080fd5b6020830191508360208260051b8501011115610ffe57600080fd5b9250929050565b6000806000806000806060878903121561101e57600080fd5b86356001600160401b038082111561103557600080fd5b6110418a838b01610fba565b9098509650602089013591508082111561105a57600080fd5b6110668a838b01610fba565b9096509450604089013591508082111561107f57600080fd5b5061108c89828a01610fba565b979a9699509497509295939492505050565b6000602082840312156110b057600080fd5b81356110bb81610f68565b9392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526012908201527110dbdb9d1c9858dd081a5cc81c185d5cd95960721b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000806040838503121561116d57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052601160045260246000fd5b818103818111156111a7576111a761117e565b92915050565b808201808211156111a7576111a761117e565b60008160001904831182151516156111da576111da61117e565b500290565b6000826111fc57634e487b7160e01b600052601260045260246000fd5b500490565b938452602084019290925260408301526001600160a01b0316606082015260800190565b634e487b7160e01b600052602160045260246000fd5b9283526001600160a01b03919091166020830152604082015260600190565b92835260208301919091526001600160a01b0316604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f416d6f756e742073686f756c642062652067726561746572207468616e203000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600182016113025761130261117e565b506001019056fe1b52f0db6b5f755caa8f232eebe353a340637e6c55969d84b3ee0cee945aa433a2646970667358221220fd0336195a824afdfd5382e1d9c1c5da5412267bbde9fb7c093f5b6e2177ce9864736f6c63430008100033";

type StakingManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StakingManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StakingManager__factory extends ContractFactory {
  constructor(...args: StakingManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _database: string,
    _rewardPool: string,
    _boostedPool: string,
    _deductionValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<StakingManager> {
    return super.deploy(
      _database,
      _rewardPool,
      _boostedPool,
      _deductionValue,
      overrides || {}
    ) as Promise<StakingManager>;
  }
  getDeployTransaction(
    _database: string,
    _rewardPool: string,
    _boostedPool: string,
    _deductionValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _database,
      _rewardPool,
      _boostedPool,
      _deductionValue,
      overrides || {}
    );
  }
  attach(address: string): StakingManager {
    return super.attach(address) as StakingManager;
  }
  connect(signer: Signer): StakingManager__factory {
    return super.connect(signer) as StakingManager__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StakingManagerInterface {
    return new utils.Interface(_abi) as StakingManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StakingManager {
    return new Contract(address, _abi, signerOrProvider) as StakingManager;
  }
}
